*
* MSX ROM LOADER
*
* CP/M SAFE
* LOAD MSX-US.ROM TO 0100H
* LOAD GAME.ROM TO 4000H
* CP/M UNSAFE FROM HERE ON
* COPY 0100H DOWN TO 0000H
* JUMP TO GAME START ADR LOADED FROM 4002H
*
NABU	EQU	1
* SET THIS TO 1 TO ENABLE PATCHER SUPPORT
PATCHE	EQU	0
*
BDOS	EQU	0005H
DEFFCB	EQU	005CH
*
IF	NABU
UART	EQU	048H
ENDIF
IF	NOT NABU
UART	EQU	0E8H
ENDIF
* TEST ROUTINES TO MAKE SURE MSX BIOS IS LOADED
DISSCR	EQU	0041H
ENASCR	EQU	0044H
*
	ORG	100H
*
START	EQU	$
	LXI	SP,STACK
	JMP	STARTH
*
	ORG	0C000H
* RUNNING IN HIGH MEMORY
STARTH	EQU	$
	DI
IF	NOT NABU
* TURN OFF H8 FRONT PANEL INTERRUPTS
	MVI	A,090H
	OUT	0F0H
ENDIF
* SHOW SIGN-ON MESSAGE
	LXI	H,MSX8MSG
	CALL	PRINTS
*
	LXI	H,LOADB1
	CALL	PRINTS
*
	LXI	H,0100H
	SHLD	ROMLOC
	LXI	H,3F00H ; UP TO APPROX 16K OF BIOS CODE
	SHLD	ROMSIZ
	LXI	H,FCBBIOS
	CALL	LDROM
	CPI	0FFH
	JZ	NOBIOSF
*
	LXI	H,LOADB2
	CALL	PRINTS
*
	LXI	H,LOADR1
	CALL	PRINTS
*
	LXI	H,4000H
	SHLD	ROMLOC
	LXI	H,8000H ; UP TO 32K ROMS
	SHLD	ROMSIZ
	LXI	H,DEFFCB ; COMMAND LINE FCB
	CALL	LDROM
	CPI	0FFH
	JZ	NOGAMEF
* GET GAME LAUNCH ADDRESS
	CALL	CRLF
	LHLD	4002H
	SHLD	GAMADR	; GAME START ADR
	PUSH	H
	MOV	A,H
	ANI	80H	; GAME SHOULD BE AT 8000H INSTEAD OF 4000H
	CNZ	COPYTO8
	LXI	H,STARTM
	CALL	PRINTS
	POP	H
	MOV	A,H
	CALL	OUTHEX
	MOV	A,L
	CALL	OUTHEX
	CALL	CRLF
*
IF	PATCHE
	LXI	H,LOADR2
	CALL	PRINTS
ENDIF
* PATCH ELEVATOR ACTION (HACK)
	LDA	4016H
	CPI	0CDH
	JNZ	STARTP1
	LDA	4017H
	CPI	059H
	JNZ	STARTP1
	LDA	4018H
	CPI	04DH
	JNZ	STARTP1
	XRA	A
	STA	4016H
	STA	4017H
	STA	4018H
	JMP	STARTH2
* THEXDER PATCH (HACK)
STARTP1 EQU	$
	LXI	H,48AFH
	MOV	A,M
	CPI	36H
	JNZ	STARTP2
	MVI	M,0
	INX	H
	MVI	M,0
	JMP	STARTH2
* KINGS VALLEY PATCH (HACK)
STARTP2	EQU	$
	LDA	403FH
	CPI	0E4H
	JNZ	STARTH2
	LDA	4040H
	CPI	040H
	JNZ	STARTH2
	XRA	A
	STA	403FH
	STA	4040H
	STA	409EH
	STA	409FH
* NOT CP/M SAFE FROM HERE ON
STARTH2 EQU	$
* COPY 16K BIOS DOWN TO 0000H
	LXI	H,0100H ; BIOS LOCATION
	LXI	D,0000H ; TARGET LOCATION
	LXI	B,3F00H ; APPROX 16K
COPYB	EQU	$
	MOV	A,M
	INX	H
	STAX	D
	INX	D
	DCX	B
	MOV	A,C
	ORA	B
	JNZ	COPYB
*
IF	PATCHE
* PATCH HARDCODED VDP AND PSG REFERENCES IN THE ROM CODE, IF ANY
* THIS IS ENABLED IN THE MSX8P.COM VERSION BUT IN THE STANDARD MSX8.COM...
* ...WE DO NOT DO THIS BECAUSE SOMETIMES IT WILL BREAK THE GAME
* THE PATCHER WILL LOOK FOR DIRECT I/O TO THE VDP AND PSG AND PATCH...
* ...WITH THE CORRECTED I/O ADDRESSES
	CALL	PATCH
ENDIF
* INITIALIZE UPPER MEMORY VARIABLES
	LXI	H,0F000H
	LXI	B,0FFFH
* ZERO ALL FROM 0xF000 UP TO 0xFFFF
FILL00	EQU	$
	XRA	A
	MOV	M,A
	INX	H
	DCX	B
	MOV	A,C
	ORA	B
	JNZ	FILL00
* FILL IN DEFAULT VALUES FOR WORKSPACE AREA
	CALL	2A00H
*
IF	NOT NABU
* SET H8 TO 4MHZ
	MVI	A,2
	OUT	030H
ENDIF
* DISABLE UART INTERRUPTS - FOR HEATHKIT SYSTEMS CP/M ENABLES THESE SO WE
* ...NEED TO TURN THEM OFF
	MVI	A,0
	OUT	UART+1	; DISABLE UART INTERRUPTS
* TURN ON Z80 IM1 MODE
	DB	0EDH,056H
*
IF	NABU
	MVI	A,07H	; SETUP PORT A=WRITE, PORTB=READ
	OUT	41H
	MVI	A,7FH
	OUT	40H
	MVI	A,0EH	; PORT A
	OUT	41H
	MVI	A,10H	; ENABLE VDP INTERRUPTS
	OUT	40H
	IN	0A1H	; CLEAR VDP INTERRUPT
ENDIF
IF	NOT NABU
*	LXI	H,RUNGAM
*	CALL	PRINTS
* WAIT FOR 'L' TO LAUNCH THE GAME
STARTL	EQU	$
*	CALL	IN350
*	CALL	OUT350
*	CPI	'D'
*	CZ	DISSCR
*	CPI	'E'
*	CZ	ENASCR
*	CPI	'L'
*	JNZ	STARTL
ENDIF
* ON NABU WE JUST LAUNCH THE GAME IMMEDIATELY
*	LXI	H,LAUGAM
*	CALL	PRINTS
*
	LHLD	GAMADR
	PCHL
	JMP	0000H
*
NOBIOSF EQU	$
	LXI	H,NOBIOS
	CALL	BDOSPS
	JMP	0000H
*
NOGAMEF EQU	$
	LXI	H,NOGAME
	CALL	BDOSPS
	JMP	0000H
* USE CP/M FILE I/O TO READ A ROM FILE
LDROM	EQU	$
	SHLD	CURFCB
	XCHG
	LXI	B,000FH
	CALL	BDOS
	CPI	0FFH
	RZ
	LXI	D,0000H
LDROML	EQU	$
	PUSH	D
	LXI	B,0014H
	LHLD	CURFCB
	XCHG
	CALL	BDOS	; READ 128 BYTES TO 0080H
	POP	D
	ORA	A
	JNZ	LDROMX
	PUSH	D
	LHLD	ROMLOC
	DAD	D	; ADD OFFSET
	XCHG		; DE=DESTINATION+OFFSET
	LXI	B,128	; BYTES TO COPY
	LXI	H,0080H ; DMA ADDRESS
LDROM1	EQU	$
	MOV	A,M
	STAX	D
	INX	H
	INX	D
	DCR	C
	JNZ	LDROM1
	POP	D
	XCHG		; HL=OFFSET
	LXI	D,128
	DAD	D	; HL=OFFSET+128
	XCHG		; DE=OFFSET+128
	MVI	A,'.'
	CALL	OUT350
	LHLD	ROMSIZ
	MOV	A,D
	CMP	H	; LOADED ENOUGH?
	JNZ	LDROML	; COPY NEXT RECORD
* CLOSE FILE AND RETURN
LDROMX	EQU	$
	XCHG		; HL=BYTES READ
	SHLD	ROMCNT
	LXI	B,0010H
	LHLD	CURFCB
	XCHG
	CALL	BDOS
	XRA	A
	RET
* LOOKING FOR DIRECT I/O TO PSG (A0,A1,A2) AND VDP (98,99)
* AND REPLACING WITH HEATHKIT PSG (BA,BB) AND VDP (B8,B9)
IF	PATCHE
PATCH	EQU	$
	XRA	A
	STA	PATCNT
	LHLD	ROMCNT
	XCHG		; DE=ROM BYTES READ
	LHLD	GAMADR
	MOV	A,H
	ANI	80H	; SLOT 2
	JZ	PATCHL
	LXI	H,8000H
	JMP	PATCH0
PATCHL	EQU	$
	LXI	H,4000H
PATCH0	EQU	$
	CALL	2900H
	STA	PATCNT
	LXI	H,LOADR3
	CALL	PRINTS
	LDA	PATCNT
	CALL	OUTHEX
	CALL	CRLF
	RET
ENDIF
* GAME IS SET UP TO RUN AT 8000H INSTEAD OF 4000H SO COPY
* 16K ROM BYTES TO 8000H
COPYTO8 EQU	$
	LXI	H,4000H
	LXI	D,8000H
	LXI	B,4000H
COPYTOL EQU	$
	MOV	A,M
	INX	H
	STAX	D
	INX	D
	DCX	B
	MOV	A,C
	ORA	B
	JNZ	COPYTOL
	RET
* CANNOT RELY ON BDOS ANYMORE AS IT WILL BE DESTROYED
* WHEN MSX BIOS IS LOADED SO WE READ THE 16550 CONSOLE
* PORT DIRECTLY
IN350R	EQU	$	; CHAR READY?
*	IN	UART+5
*	ANI	01H
	RET
IN350	EQU	$	; WAIT FOR INPUT
*	CALL	IN350R
*	JZ	IN350
*	IN	UART
	RET
*
OUT350	EQU	$
	PUSH	PSW
OUT350L EQU	$
	IN	UART+5
	ANI	20H
	JZ	OUT350L
	POP	PSW
	OUT	UART
	RET
*
CRLF	EQU	$
	MVI	A,0DH
	CALL	OUT350
	MVI	A,0AH
	CALL	OUT350
	RET
*
IF	0
* DUMP MEM AT HL C=NUM BYTES
OUTMEM	EQU	$
	CALL	CRLF
	MOV	A,H
	CALL	OUTHEX
	MOV	A,L
	CALL	OUTHEX
	MOV	A,M
	CALL	OUTHEX
	INX	H
	DCR	C
	JNZ	OUTMEM
	CALL	CRLF
	CALL	CRLF
	RET
ENDIF
* PRINT HEX VALUE OF (A) TO CONSOLE
OUTHEX	EQU	$
	PUSH	D
	PUSH	H
	PUSH	PSW
	ANI	0F0H
	RAR
	RAR
	RAR
	RAR
	MOV	E,A
	MVI	D,0
	LXI	H,HEXTBL
	DAD	D
	MOV	A,M
	CALL	OUT350
	POP	PSW
	ANI	00FH
	MOV	E,A
	MVI	D,0
	LXI	H,HEXTBL
	DAD	D
	MOV	A,M
	CALL	OUT350
	POP	H
	POP	D
	RET
* HL=STRING TERMINATED WITH $
BDOSPS	EQU	$
	PUSH	B
	PUSH	D
	MVI	C,09H
	XCHG
	CALL	BDOS
	POP	D
	POP	B
	RET
* HL=STRING TERMINATED WITH $
PRINTS	EQU	$
	MOV	A,M
	CPI	'$'
	RZ
	CALL	OUT350
	INX	H
	JMP	PRINTS
*
HEXTBL	DB	'0123456789ABCDEF'
*
MSX8MSG DB	0DH,0AH,'MSX ROM LOADER',0DH,0AH
	DB	'USAGE: MSX8 GAMEFILE.ROM',0DH,0AH
	DB	'2024 BY LES BIRD',0DH,0AH
	DB	'$'
LOADB1	DB	0DH,0AH
	DB	'LOADING MSX-US.ROM BIOS',0DH,0AH,'$'
LOADB2	DB	0DH,0AH,'DONE',0DH,0AH,'$'
LOADR1	DB	0DH,0AH
	DB	'LOADING GAME',0DH,0AH,'$'
IF	PATCHE
LOADR2	DB	0DH,0AH
	DB	'PATCHING (IF NECESSARY)...','$'
LOADR3	DB	0DH,0AH
	DB	'DONE - PATCHES APPLIED: ','$'
ENDIF
IF	0
RUNGAM	DB	0DH,0AH
	DB	'PRESS L TO LAUNCH GAME',0DH,0AH,'$'
LAUGAM	DB	0DH,0AH
	DB	'LAUNCHING GAME',0DH,0AH,'$'
ENDIF
NOBIOS	DB	0DH,0AH
	DB	'NO MSX-US.ROM BIOS FILE FOUND',0DH,0AH,'$'
NOGAME	DB	0DH,0AH
	DB	'NO GAME FILE TO LOAD',0DH,0AH
	DB	'USAGE: MSX8 GAMEFILE.ROM',0DH,0AH,'$'
STARTM	DB	'START ADDRESS: ','$'
*
ROMLOC	DW	0
ROMSIZ	DW	0
ROMCNT	DW	0
PATCNT	DB	0
GAMADR	DW	0
CURFCB	DW	0
*
FCBBIOS DB	0		; DRIVE
	DB	'MSX-US  '	; FILENAME
	DB	'ROM'		; EXTENSION
	DB	0		; EXT NUM
	DB	0		; RESERVED
	DB	0		; RESERVED
	DB	0		; RECORD COUNT
	DS	16
	DB	0		; CURRENT RECORD
	DS	3		; RANDOM RECORD NUM
*
FCBGAME DB	0
	DB	'GALAX343'
	DB	'ROM'
	DB	0
	DB	0
	DB	0
	DB	0
	DS	16
	DB	0
	DS	3
*
	DS	32
STACK	EQU	$
*
	END	START
